# Triggers
trigger:
  branches:
    include:
      - 'main'
      - 'release-*'
  tags:
    include:
      - '*'
pr:
  autoCancel: true
  branches:
    include:
      - '*'

# Stages
stages:
  - stage: java_build
    displayName: Java
    jobs:
      - job: 'build_and_test_java'
        displayName: 'Build & Test'
        # Strategy for the job
        strategy:
          matrix:
            'java-11':
              image: 'Ubuntu-18.04'
              jdk_version: '11'
              jdk_path: '/usr/lib/jvm/java-11-openjdk-amd64'
        # Set timeout for jobs
        timeoutInMinutes: 60
        # Base system
        pool:
          vmImage: $(image)
        # Variables
        variables:
          MVN_CACHE_FOLDER: $(HOME)/.m2/repository
          MVN_ARGS: '-e -V -B'
        # Pipeline steps
        steps:
          - task: Cache@2
            inputs:
              key: 'mvn-m2-cache | $(System.JobName)'
              path: "$(MVN_CACHE_FOLDER)"
            displayName: Maven cache
          - template: 'templates/setup_java.yaml'
            parameters:
              JDK_PATH: $(jdk_path)
              JDK_VERSION: $(jdk_version)
          - bash: ".azure/scripts/java-build.sh"
            env:
              BUILD_REASON: $(Build.Reason)
              BRANCH: $(Build.SourceBranch)
              MVN_ARGS: "-Dquarkus.native.container-build=true"
            displayName: "Build & Test Java"
          - publish: $(System.DefaultWorkingDirectory)/target
            artifact: Binary
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: JUnit
              testResultsFiles: '**/TEST-*.xml'
              testRunTitle: "Unit & Integration tests"
            condition: always()
  - stage: container_build
    displayName: Prepare Container
    dependsOn: 
      - java_build
    jobs:
      - job: 'build_container'
        displayName: 'Build'
        # Set timeout for jobs
        timeoutInMinutes: 60
        # Base system
        pool:
          vmImage: 'Ubuntu-18.04'
        # Pipeline steps
        steps:
          - template: 'templates/setup_docker.yaml'
          - task: DownloadPipelineArtifact@2
            inputs:
              source: current
              artifact: Binary
              path: $(System.DefaultWorkingDirectory)/target
          - bash: ".azure/scripts/container-build.sh"
            env:
              BUILD_REASON: $(Build.Reason)
              BRANCH: $(Build.SourceBranch)
              DOCKER_REGISTRY: "quay.io"
              DOCKER_ORG: "strimzi"
            displayName: "Build container"
          - publish: $(System.DefaultWorkingDirectory)/drain-cleaner-container.tar.gz
            artifact: Container
  - stage: container_publish
    displayName: Publish Container
    dependsOn: 
      - container_build
    condition: and(succeeded(), or(eq(variables['build.sourceBranch'], 'refs/heads/main'), startsWith(variables['build.sourceBranch'], 'refs/tags/')))
    jobs:
      - job: 'container_build'
        displayName: 'Tag & Push'
        # Set timeout for jobs
        timeoutInMinutes: 60
        # Base system
        pool:
          vmImage: 'Ubuntu-18.04'
        # Pipeline steps
        steps:
          - template: 'templates/setup_docker.yaml'
          - task: DownloadPipelineArtifact@2
            inputs:
              source: current
              artifact: Container
              path: $(System.DefaultWorkingDirectory)/drain-cleaner-container.tar.gz
          - bash: ".azure/scripts/container-push.sh"
            env:
              BUILD_REASON: $(Build.Reason)
              BRANCH: $(Build.SourceBranch)
              DOCKER_USER: $(QUAY_USER)
              DOCKER_PASS: $(QUAY_PASS)
              DOCKER_REGISTRY: "quay.io"
              DOCKER_ORG: "strimzi"
            displayName: "Tag & Push container"
